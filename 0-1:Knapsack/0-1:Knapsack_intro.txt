## 0-1:Knapsack

    ** Knapsack means a bag kind of thing that can store some amount

    ** Problems based on this concept contains some items and property and Size of knapsack is given.

        Ex. Let say 4 itmes are there and a Knapsack with Max Capacity : W

        Profit : P1, P2, P3, P4
        Weight : W1, W2, W3, W4

        We need to determine the Maximum Profit that can be obtained by putting items in the knapsack.

    ** There are Three Types of Knapsack Problems

        1. Fractional Knapsack

            ** In this Type the Items can be partially added to the Knapsack whole items addition is not neccsaory.

        2. 0-1:Knapsack

            ** Also known as Binary knapsack
            ** As 0-1 Suggest either to include the item fully or to not include.

        3. Unbounded Knapsack

            ** As name unbounded suggest supply of any item is unlimited.




    ## Now we will Identify the DP in This problem

        ** Since in this problem it is asked for the maximum Profit hence this is the problem of optimality.

        ** Also the Choice to include any item or not is present

        ** We will write the recursive code using the pattern as below

            Function()
            {
                1. Base Case

                    ** In this check for the smallest valid input that your function will take
                    ** In this problem either Weight array size may be zero or Capacity of Knapsack may be zero.
                    ** Thus profit will be zero is this case, this will be the base case.

                        if(N == 0 || W == 0)
                            return 0;

                
                2. Choice diagram

                    ** Try to write the choice diagram for the Problem
                    ** Let Select any item with Weight W1
                    
                                            Item 
                                             W1

                                W1 <= W                W1 > W


                            Yes           No             No


                        if(W1 <= W)
                            Select item;
                                or
                            Not Select;

                        else

        
                            Not Select;
        

        
        ** Now Memoization for the recursive code

            ** We will store the values that are obtained in a 2 d matrix named as DP.

            ** We need to know the Size of the Matrix DP 

            ** We will look at function calls in the recursive code and notice the parameters that are changing.

            ** For this problem the Size of matrix and Capacity variable changing.

            ** Let say Size : N , Capacity : W the Matrix DP : DP[N + 1][W + 1]

            ** Initialize the Matrix with all values equal to zero.

            ** DP[N][W] will return the Required value.

            ** All other values of the Matrix is the answer at any subproblem hence this is the case of overlapping subproblem in Dynammic programming.

        
        
        ** Top down approach for the Recursive code

            ** Our aim while writing the top down approach is to totally emit recursive cals.

            ** Similar as in the case of Memoization matix DP[N + 1][W + 1] is created. 

            ** Replace the Base case condition with the Initialization of DP matrix , Column Zero and Row Zero is set to Zero.

            